AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploy Laravel Application on EC2 with RDS in VPC"

Resources:
  # VPC
  LaravelVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: "LaravelVPC"

  # Public Subnet (AZ 1)
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LaravelVPC
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: "PublicSubnetA"

  # Private Subnet (AZ 1)
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LaravelVPC
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: "PrivateSubnetA"

  # Private Subnet (AZ 2)
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LaravelVPC
      CidrBlock: "10.0.3.0/24"
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: "PrivateSubnetB"

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref LaravelVPC
      InternetGatewayId: !Ref InternetGateway

  # Route Table for Public Subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LaravelVPC
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  # Security Groups
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP traffic to EC2"
      VpcId: !Ref LaravelVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow MySQL access from EC2"
      VpcId: !Ref LaravelVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EC2SecurityGroup

  # DB Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for Laravel DB across two AZs"
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      Tags:
        - Key: Name
          Value: "LaravelDBSubnetGroup"

  # RDS Instance
  LaravelRDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.micro
      Engine: mysql
      EngineVersion: "8.0.32"
      AllocatedStorage: "20"
      DBName: laravelDB
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      MultiAZ: false
      BackupRetentionPeriod: 0

  # EC2 Instance
  LaravelEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: "t2.micro"
      SubnetId: !Ref PublicSubnetA
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      ImageId: ami-063d43db0594b521b  # Amazon Linux 2 AMI (Free Tier eligible)
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: "LaravelAppServer"

  # IAM User for Admin Access
  LaravelAdminUser:
    Type: AWS::IAM::User
    Properties:
      UserName: "LaravelAdminUser"
      LoginProfile:
        Password: !Ref IAMUserPassword
        PasswordResetRequired: true
      Policies:
        - PolicyName: "LaravelAdminUserPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ec2:*"
                Resource:
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/${LaravelEC2Instance}
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${EC2SecurityGroup}
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${RDSSecurityGroup}
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${LaravelVPC}
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PublicSubnetA}
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnetA}
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnetB}

              - Effect: "Allow"
                Action:
                  - "rds:*"
                Resource:
                  - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:${LaravelRDSInstance}
                  - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:subgrp/${DBSubnetGroup}

              - Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: "*"

Parameters:
  KeyName:
    Description: "KeyPair for SSH access"
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: "Must be a valid key name."
  DBUsername:
    Description: "Database admin account username"
    Type: String
    MinLength: 1
    MaxLength: 16
  DBPassword:
    Description: "Database admin account password"
    Type: String
    MinLength: 8
    MaxLength: 16
    NoEcho: true
  IAMUserPassword:
    Description: "Initial password for IAM user"
    Type: String
    MinLength: 12
    MaxLength: 128
    NoEcho: true  # Hides the password input in the console for security

Outputs:
  EC2InstanceId:
    Description: Instance ID of the EC2 instance
    Value: !Ref LaravelEC2Instance
  RDSInstanceEndpoint:
    Description: Endpoint of the RDS instance
    Value: !GetAtt LaravelRDSInstance.Endpoint.Address